{
  "db_name": "SQLite",
  "query": "\n                WITH RECURSIVE ancestors AS (\n                -- Anchor: start from the requested file\n                SELECT\n                    0 AS depth,\n                    f.id,\n                    -- If this file is directly shared, do not leak its parent.\n                    IIF(sl.file_id IS NOT NULL, NULL, f.parent_id) AS parent_id,\n                    f.encrypted_name,\n                    f.encrypted_key,\n                    f.file_nonce,\n                    f.key_nonce,\n                    f.name_nonce,\n                    f.mime_type_nonce,\n                    f.owner_id,\n                    f.uploader_id,\n                    f.is_directory,\n                    f.mime,\n                    f.created_at,\n                    f.modified_at,\n                    IIF(sl.file_id IS NOT NULL, 1, 0) AS directly_shared,\n                    edit_permission\n                FROM file f\n                LEFT JOIN share_link sl \n                    ON f.id = sl.file_id \n                    AND sl.id = ?                             -- Parameter: share_link id\n                    AND (sl.expires_at IS NULL OR DATETIME(sl.expires_at) >= CURRENT_TIMESTAMP)\n                WHERE f.id = ?                              -- Parameter: requested file id\n\n                UNION ALL\n\n                -- Recursive: walk upward only if the previous row was not directly shared.\n                SELECT\n                    a.depth + 1 AS depth,\n                    f.id,\n                    IIF(sl.file_id IS NOT NULL, NULL, f.parent_id) AS parent_id,\n                    f.encrypted_name,\n                    f.encrypted_key,\n                    f.file_nonce,\n                    f.key_nonce,\n                    f.name_nonce,\n                    f.mime_type_nonce,\n                    f.owner_id,\n                    f.uploader_id,\n                    f.is_directory,\n                    f.mime,\n                    f.created_at,\n                    f.modified_at,\n                    IIF(sl.file_id IS NOT NULL, 1, 0) AS directly_shared,\n                    sl.edit_permission AS edit_permission\n                FROM file f\n                JOIN ancestors a ON f.id = a.parent_id\n                LEFT JOIN share_link sl \n                    ON f.id = sl.file_id \n                    AND sl.id = ?                             -- Parameter: share_link id (again)\n                    AND (sl.expires_at IS NULL OR DATETIME(sl.expires_at) >= CURRENT_TIMESTAMP)\n                WHERE a.directly_shared = 0\n            )\n            SELECT \n                depth AS \"depth!: u32\",\n                id AS \"id: Uuid\",\n                parent_id AS \"parent_id: Uuid\", \n                encrypted_name, \n                encrypted_key, \n                owner_id AS \"owner_id: Uuid\",\n                uploader_id AS \"uploader_id: Uuid\",\n                file_nonce,\n                key_nonce,\n                name_nonce,\n                mime_type_nonce,\n                is_directory AS \"is_directory!\",\n                mime,\n                -- Ancestors are always directories so their size must\n                -- be always be 0\n                0 AS \"size!: i64\",\n                edit_permission AS \"edit_permission?\",\n                created_at,\n                modified_at\n            FROM ancestors\n            WHERE depth > 0\n            ORDER BY depth DESC\n        ",
  "describe": {
    "columns": [
      {
        "name": "depth!: u32",
        "ordinal": 0,
        "type_info": "Null"
      },
      {
        "name": "id: Uuid",
        "ordinal": 1,
        "type_info": "Blob"
      },
      {
        "name": "parent_id: Uuid",
        "ordinal": 2,
        "type_info": "Null"
      },
      {
        "name": "encrypted_name",
        "ordinal": 3,
        "type_info": "Text"
      },
      {
        "name": "encrypted_key",
        "ordinal": 4,
        "type_info": "Text"
      },
      {
        "name": "owner_id: Uuid",
        "ordinal": 5,
        "type_info": "Blob"
      },
      {
        "name": "uploader_id: Uuid",
        "ordinal": 6,
        "type_info": "Blob"
      },
      {
        "name": "file_nonce",
        "ordinal": 7,
        "type_info": "Text"
      },
      {
        "name": "key_nonce",
        "ordinal": 8,
        "type_info": "Text"
      },
      {
        "name": "name_nonce",
        "ordinal": 9,
        "type_info": "Text"
      },
      {
        "name": "mime_type_nonce",
        "ordinal": 10,
        "type_info": "Text"
      },
      {
        "name": "is_directory!",
        "ordinal": 11,
        "type_info": "Bool"
      },
      {
        "name": "mime",
        "ordinal": 12,
        "type_info": "Text"
      },
      {
        "name": "size!: i64",
        "ordinal": 13,
        "type_info": "Null"
      },
      {
        "name": "edit_permission?",
        "ordinal": 14,
        "type_info": "Bool"
      },
      {
        "name": "created_at",
        "ordinal": 15,
        "type_info": "Datetime"
      },
      {
        "name": "modified_at",
        "ordinal": 16,
        "type_info": "Datetime"
      }
    ],
    "parameters": {
      "Right": 3
    },
    "nullable": [
      null,
      false,
      null,
      false,
      false,
      true,
      true,
      true,
      true,
      false,
      true,
      false,
      true,
      null,
      false,
      false,
      false
    ]
  },
  "hash": "542bceb7ea6f3638de223a518c41928a0201fc34eb34bcd1ec413424d39bd58c"
}
