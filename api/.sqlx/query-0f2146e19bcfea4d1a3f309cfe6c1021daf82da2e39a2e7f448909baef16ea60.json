{
  "db_name": "SQLite",
  "query": "\n                WITH RECURSIVE children AS (\n                    -- Anchor member (root or specified node)\n                    SELECT\n                        0 AS depth,\n                        id,\n                        parent_id,\n                        encrypted_name,\n                        share_user.encrypted_key,\n                        nonce,\n                        owner_id,\n                        is_directory,\n                        mime,\n                        size,\n                        file.created_at,\n                        modified_at\n                    FROM file\n                    JOIN share_user ON file.id = share_user.file_id\n                    WHERE\n                        user_id = ? AND \n                        id = COALESCE(?, id)\n                    UNION ALL\n\n                    -- Recursive member\n                    SELECT\n                        c.depth + 1,\n                        f.id,\n                        f.parent_id,\n                        f.encrypted_name,\n                        f.encrypted_key,\n                        f.nonce,\n                        f.owner_id,\n                        f.is_directory,\n                        f.mime,\n                        f.size,\n                        f.created_at,\n                        f.modified_at\n                    FROM file f\n                    JOIN children c ON f.parent_id = c.id\n                    WHERE\n                        c.depth < ?\n                    ORDER BY c.depth + 1\n                )\n                SELECT\n                    -- Goofy ahh workaround to get the query to work with sqlx\n                    depth AS \"depth!: u32\",\n                    id AS \"id: Uuid\",\n                    parent_id AS \"parent_id: Uuid\", \n                    encrypted_name,\n                    encrypted_key,\n                    nonce,\n                    owner_id AS \"owner_id: Uuid\",\n                    is_directory,\n                    mime,\n                    size,\n                    created_at,\n                    modified_at\n                FROM (SELECT * FROM children ORDER BY depth LIMIT ? OFFSET ?) ORDER BY depth DESC\n    ",
  "describe": {
    "columns": [
      {
        "name": "depth!: u32",
        "ordinal": 0,
        "type_info": "Integer"
      },
      {
        "name": "id: Uuid",
        "ordinal": 1,
        "type_info": "Blob"
      },
      {
        "name": "parent_id: Uuid",
        "ordinal": 2,
        "type_info": "Blob"
      },
      {
        "name": "encrypted_name",
        "ordinal": 3,
        "type_info": "Text"
      },
      {
        "name": "encrypted_key",
        "ordinal": 4,
        "type_info": "Text"
      },
      {
        "name": "nonce",
        "ordinal": 5,
        "type_info": "Text"
      },
      {
        "name": "owner_id: Uuid",
        "ordinal": 6,
        "type_info": "Blob"
      },
      {
        "name": "is_directory",
        "ordinal": 7,
        "type_info": "Bool"
      },
      {
        "name": "mime",
        "ordinal": 8,
        "type_info": "Text"
      },
      {
        "name": "size",
        "ordinal": 9,
        "type_info": "Integer"
      },
      {
        "name": "created_at",
        "ordinal": 10,
        "type_info": "Datetime"
      },
      {
        "name": "modified_at",
        "ordinal": 11,
        "type_info": "Datetime"
      }
    ],
    "parameters": {
      "Right": 5
    },
    "nullable": [
      false,
      false,
      true,
      false,
      false,
      false,
      true,
      true,
      true,
      true,
      false,
      false
    ]
  },
  "hash": "0f2146e19bcfea4d1a3f309cfe6c1021daf82da2e39a2e7f448909baef16ea60"
}
