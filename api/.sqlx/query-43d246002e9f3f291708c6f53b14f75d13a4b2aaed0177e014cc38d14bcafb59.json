{
  "db_name": "SQLite",
  "query": "\n            WITH RECURSIVE children AS (\n                -- Anchor member (root or specified node)\n                SELECT\n                    0 AS depth,\n                    id,\n                    -- Use IFF to only show the parent id if the file is not directly shared with the user\n                    -- This is because files that are directly shared with the user will likely have a parent id\n                    -- that is not shared with the user, therefore leaking info the user should not have access to\n                    IIF(id = share_user.file_id, NULL, parent_id) AS parent_id,\n                    encrypted_name,\n                    -- If the file is directly shared with the user, then the user need to use their own key to decrypt it\n                    -- so use that key instead of the file's key if it exists, otherwise we know the file is not directly shared\n                    -- with the user so we can use the file's key since the user can decrypt it using the ancestor's key\n                    COALESCE(share_user.encrypted_key, file.encrypted_key) AS encrypted_key,\n                    nonce,\n                    owner_id,\n                    uploader_id,\n                    is_directory,\n                    mime,\n                    size,\n                    file.created_at,\n                    file.modified_at\n                FROM file\n                LEFT JOIN share_user ON file.id = share_user.file_id\n                WHERE\n                    -- Don't show files that are shared with other users\n                    (user_id IS NULL OR user_id = ?) AND \n                    -- Don't show files owned by the user, as they aren't shared\n                    owner_id != ? AND\n                    -- If no file id is provided, then show the root directory\n                    -- We need to use COALESCE to ensure that only files in root directory\n                    -- are shown if the file id is NULL. We can idenfify shared files in the root directory\n                    -- by checking if the file is directly shared with the user\n                    id = COALESCE(?, share_user.file_id)\n                UNION ALL\n\n                -- Recursive member\n                SELECT\n                    c.depth + 1,\n                    f.id,\n                    f.parent_id,\n                    f.encrypted_name,\n                    f.encrypted_key,\n                    f.nonce,\n                    f.owner_id,\n                    f.uploader_id,\n                    f.is_directory,\n                    f.mime,\n                    f.size,\n                    f.created_at,\n                    f.modified_at\n                FROM file f\n                JOIN children c ON f.parent_id = c.id\n                WHERE\n                    c.depth < ?\n                ORDER BY c.depth + 1\n            )\n            SELECT\n                -- Goofy ahh workaround to get the query to work with sqlx\n                depth AS \"depth!: u32\",\n                id AS \"id: Uuid\",\n                parent_id AS \"parent_id: Uuid\", \n                encrypted_name,\n                encrypted_key,\n                nonce,\n                owner_id AS \"owner_id: Uuid\",\n                uploader_id AS \"uploader_id: Uuid\",\n                is_directory,\n                mime,\n                size,\n                created_at,\n                modified_at\n            FROM children ORDER BY depth ASC LIMIT ? OFFSET ?\n    ",
  "describe": {
    "columns": [
      {
        "name": "depth!: u32",
        "ordinal": 0,
        "type_info": "Integer"
      },
      {
        "name": "id: Uuid",
        "ordinal": 1,
        "type_info": "Blob"
      },
      {
        "name": "parent_id: Uuid",
        "ordinal": 2,
        "type_info": "Blob"
      },
      {
        "name": "encrypted_name",
        "ordinal": 3,
        "type_info": "Text"
      },
      {
        "name": "encrypted_key",
        "ordinal": 4,
        "type_info": "Text"
      },
      {
        "name": "nonce",
        "ordinal": 5,
        "type_info": "Text"
      },
      {
        "name": "owner_id: Uuid",
        "ordinal": 6,
        "type_info": "Blob"
      },
      {
        "name": "uploader_id: Uuid",
        "ordinal": 7,
        "type_info": "Blob"
      },
      {
        "name": "is_directory",
        "ordinal": 8,
        "type_info": "Bool"
      },
      {
        "name": "mime",
        "ordinal": 9,
        "type_info": "Text"
      },
      {
        "name": "size",
        "ordinal": 10,
        "type_info": "Integer"
      },
      {
        "name": "created_at",
        "ordinal": 11,
        "type_info": "Datetime"
      },
      {
        "name": "modified_at",
        "ordinal": 12,
        "type_info": "Datetime"
      }
    ],
    "parameters": {
      "Right": 6
    },
    "nullable": [
      false,
      false,
      true,
      false,
      false,
      false,
      true,
      true,
      false,
      true,
      false,
      false,
      false
    ]
  },
  "hash": "43d246002e9f3f291708c6f53b14f75d13a4b2aaed0177e014cc38d14bcafb59"
}
